<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.jxzhang.mybatis.mapper.StudentMapper">

    <!--
        id: 在命名空间中的唯一标示符，可以用来引用这条语句
        parameterType：将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。
        resultType：从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。
        resultMap: 外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，许多复杂映射的情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用。
        flushCache: 将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。
        useCache: 将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。
        timeout: 这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
        fetchSize: 这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。
        statementType: STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
        resultSetType: FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。
        resultSets: 这个设置仅对多结果集的情况适用，它将列出语句执行后返回的结果集并每个结果集给一个名称，名称是逗号分隔的。
        databaseId: 如果配置了 databaseIdProvider，MyBatis 会加载所有的不带 databaseId 或匹配当前 databaseId 的语句；如果带或者不带的语句都有，则不带的会被忽略。
     -->
    <select
            id="selectStudentById"
            resultType="hashmap">
        select *
        from student
        where student_id = #{id}
    </select>

    <select id="selectStudentList" resultType="Student">
        SELECT * FROM STUDENT;
    </select>

    <insert id="insertStudent">
        INSERT INTO student (student_name, student_age)
            VALUE (#{studentName}, #{studentAge})
    </insert>

    <!-- 配置自增主键 -->
    <insert id="insertStudent2" useGeneratedKeys="true" keyColumn="student_id">
        INSERT INTO student (student_name, student_age)
            VALUE (#{studentName}, #{studentAge})
    </insert>

    <update id="updateStudent">
        UPDATE student
        SET student_name = #{studentName}
        WHERE student_id = #{studentId}
    </update>

    <delete id="deleteStudent">
        DELETE FROM student
        WHERE student_id = #{studentId}
    </delete>

    <sql id="student_column">
        student_id, student_name, student_age
    </sql>

    <sql id="student_column2">
        ${alias}.student_id, ${alias}.student_name, ${alias}.student_age
    </sql>

    <!-- 测试批量插入 -->
    <!-- collection：集合类型，student：集合中单个元素名称，separator：元素分隔符 -->
    <insert id="insertStudents">
        INSERT INTO student (student_name, student_age) VALUES
        <foreach collection="list" item="student" separator=",">
            (#{student.studentName}, #{student.studentAge})
        </foreach>
    </insert>

    <select id="selectStudentById3" resultType="Student">
        SELECT
        <include refid="student_column"/>
        FROM student WHERE student_id = #{student_id} ORDER BY student_age;
    </select>

    <select id="selectStudents2" resultType="map">
        select
        <include refid="student_column2">
            <property name="alias" value="t1"/>
        </include>
        ,
        <include refid="student_column2">
            <property name="alias" value="t2"/>
        </include>
        from student t1
        cross join student t2
    </select>

    <!-- 配置自增主键 -->
    <insert id="insertStudent3" useGeneratedKeys="true" keyColumn="student_id">
        INSERT INTO student (student_name, student_age)
            VALUE (#{studentName, javaType=String, jdbcType=VARCHAR}, #{studentAge, javaType=int, jdbcType=NUMERIC})
    </insert>

    <!-- ${} 将不会使用 PrepareStatement中的？作为占位符，将会直接替换内容-->
    <select id="selectStudents" resultType="Student">
        SELECT
        <include refid="student_column"/>
        FROM student ORDER BY ${student_age};
    </select>

    <select id="selectStudentByIdAndName" resultType="Student">
        SELECT *
        FROM student
        WHERE student_name = #{studentName} AND student_age = #{studentAge}
    </select>

    <!-- 传递参数为Map，这时候需要指定JavaType类型：
           1. 类型如果不指定MyBatis会尝试自动推测，即使传入参数为HashMap类型
           2. 如果指定了JavaType，但是给定类型不是配置文件中指定的类型，将会报错
     -->
    <select id="selectStudentByIdAndName2" resultType="Student">
        SELECT *
        FROM student
        WHERE student_name = #{studentName, javaType=String, jdbcType=VARCHAR}
              AND
              student_age = #{studentAge, javaType=Integer, jdbcType=INTEGER}
    </select>


    <!--
        测试返回Map类型参数
     -->
    <select id="selectStudentReturnMap" resultType="map">
        SELECT *
        FROM student
        WHERE student_name = #{studentName, javaType=String, jdbcType=VARCHAR}
              AND
              student_age = #{studentAge, javaType=Integer, jdbcType=INTEGER}
    </select>

    <sql id="student-with-city">
        ${student}.student_name AS name,
        ${student}.student_age AS age,
        ${city}.name AS country
    </sql>

    <!--
        测试返回多表的Map类型参数
     -->
    <select id="selectStudentReturnMap2" resultType="map">
        SELECT
        <include refid="student-with-city">
            <property name="student" value="s"/>
            <property name="city" value="c"/>
        </include>
        FROM student s INNER JOIN city c ON s.student_city = c.id
        WHERE s.student_name = #{studentName, javaType=String, jdbcType=VARCHAR}
        AND
        s.student_age = #{studentAge, javaType=Integer, jdbcType=INTEGER}
    </select>


    <!--
        resultMap 整体结构：

          constructor - 用于在实例化类时，注入结果到构造方法中
            idArg - ID 参数;标记出作为 ID 的结果可以帮助提高整体性能
            arg - 将被注入到构造方法的一个普通结果
          id – 一个 ID 结果;标记出作为 ID 的结果可以帮助提高整体性能
          result – 注入到字段或 JavaBean 属性的普通结果
          association – 一个复杂类型的关联;许多结果将包装成这种类型
            嵌套结果映射 – 关联可以指定为一个 resultMap 元素，或者引用一个
          collection – 一个复杂类型的集合
            嵌套结果映射 – 集合可以指定为一个 resultMap 元素，或者引用一个
          discriminator – 使用结果值来决定使用哪个 resultMap
            case – 基于某些值的结果映射
              嵌套结果映射 – 一个 case 也是一个映射它本身的结果,因此可以包含很多相 同的元素，或者它可以参照一个外部的 resultMap。
     -->

    <!--
        resultMap属性

        id	        当前命名空间中的一个唯一标识，用于标识一个result map.
        type	    类的完全限定名, 或者一个类型别名 (内置的别名可以参考上面的表格).
        autoMapping	如果设置这个属性，MyBatis将会为这个ResultMap开启或者关闭自动映射。这个属性会覆盖全局的属性 autoMappingBehavior。默认值为：unset
        	NONE 表示取消自动映射: 仅设置手动映射属性，其他属性将不映射
        	PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。（默认值）
        	FULL 会自动映射任意复杂的结果集（无论是否嵌套）。
     -->
    <resultMap id="studentResultMap" type="cn.jxzhang.mybatis.model.Student">
        <!-- 指定id字段可以提高整体性能(缓存相关) -->
        <!--
            注意：如果没有指定TypeHandler，将会使用默认的TypeHandler，否则使用指定的TypeHandler
         -->
        <!--
            property	映射到列结果的字段或属性。如果用来匹配的 JavaBeans 存在给定名字的属性，那么它将会被使用。否则 MyBatis 将会寻找给定名称 property 的字段。 无论是哪一种情形，你都可以使用通常的点式分隔形式进行复杂属性导航。比如,你可以这样映射一些简单的东西: “username” ,或者映射到一些复杂的东西: “address.street.number” 。
            column	    数据库中的列名,或者是列的别名。一般情况下，这和 传递给 resultSet.getString(columnName) 方法的参数一样。
            javaType	一个 Java 类的完全限定名,或一个类型别名(参考上面内建类型别名 的列表) 。如果你映射到一个 JavaBean,MyBatis 通常可以断定类型。 然而,如果你映射到的是 HashMap,那么你应该明确地指定 javaType 来保证期望的行为。
            jdbcType	JDBC 类型，所支持的 JDBC 类型参见这个表格之后的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程,你需要对可能为 null 的值指定这个类型。
            typeHandler	我们在前面讨论过的默认类型处理器。使用这个属性,你可以覆盖默 认的类型处理器。这个属性值是一个类型处理 器实现类的完全限定名，或者是类型别名。
         -->
        <id property="studentId" column="student_id" javaType="String" jdbcType="VARCHAR"
            typeHandler="cn.jxzhang.mybatis.handler.MyIntegerTypeHandler"/>
        <result property="studentName" column="student_name"
                typeHandler="cn.jxzhang.mybatis.handler.MyStringTypeHandler"/>

        <!-- 该条属性没有指定类型 -->
        <result property="studentAge" column="student_age"/>
    </resultMap>


    <!--
        测试使用ResultMap对应数据库列与POJO对象
     -->
    <select id="selectStudentReturnResultMap" resultMap="studentResultMap">
        SELECT *
        FROM student s
        WHERE s.student_name = #{studentName, javaType=String, jdbcType=VARCHAR}
              AND
              s.student_age = #{studentAge, javaType=Integer, jdbcType=INTEGER}
    </select>


    <!-- 测试Constructor元素 -->
    <resultMap id="studentResultMap2" type="cn.jxzhang.mybatis.model.Student">
        <constructor>
            <idArg column="student_id" name="studentId" javaType="int" jdbcType="INTEGER"/>
            <idArg column="student_name" name="studentName" javaType="String" jdbcType="VARCHAR"/>
            <idArg column="student_age" name="studentAge" javaType="int" jdbcType="INTEGER"/>
        </constructor>
    </resultMap>

    <!--
        测试使用ResultMap对应数据库列与POJO对象
     -->
    <select id="selectStudentReturnResultMap2" resultMap="studentResultMap2">
        SELECT *
        FROM student s
        WHERE s.student_name = #{studentName, javaType=String, jdbcType=VARCHAR}
              AND
              s.student_age = #{studentAge, javaType=Integer, jdbcType=INTEGER}
    </select>

    <sql id="student-and-city">
        ${student}.student_id,
        ${student}.student_name,
        ${student}.student_age,
        ${student}.student_city,
        ${city}.id,
        ${city}.name,
        ${city}.state,
        ${city}.country
    </sql>

    <resultMap id="studentResult" type="Student">
        <id property="studentId" column="student_id"/>
        <result property="studentName" column="student_name"/>
        <result property="studentAge" column="student_age"/>
        <association property="city" column="student_city" javaType="cn.jxzhang.mybatis.model.City"
                     resultMap="cityResult"/>
    </resultMap>

    <resultMap id="cityResult" type="cn.jxzhang.mybatis.model.City">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="state" property="state"/>
        <result column="country" property="country"/>
    </resultMap>

    <resultMap id="studentWithInnerCityResult" type="Student">
        <id property="studentId" column="student_id"/>
        <result property="studentName" column="student_name"/>
        <result property="studentAge" column="student_age"/>
        <association property="city" column="student_city" javaType="cn.jxzhang.mybatis.model.City">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="state" property="state"/>
            <result column="country" property="country"/>
        </association>
    </resultMap>

    <select id="selectStudentWithCity" resultMap="studentResult">
        SELECT
        <include refid="student-and-city">
            <property name="student" value="s"/>
            <property name="city" value="c"/>
        </include>
        FROM student s inner join city c on s.student_city = c.id
        WHERE s.student_name = #{studentName, javaType=String, jdbcType=VARCHAR}
        AND
        s.student_age = #{studentAge, javaType=Integer, jdbcType=INTEGER}
    </select>

    <select id="selectStudentWithCity2" resultMap="studentWithInnerCityResult">
        SELECT
        <include refid="student-and-city">
            <property name="student" value="s"/>
            <property name="city" value="c"/>
        </include>
        FROM student s inner join city c on s.student_city = c.id
        WHERE s.student_name = #{studentName, javaType=String, jdbcType=VARCHAR}
        AND
        s.student_age = #{studentAge, javaType=Integer, jdbcType=INTEGER}
    </select>

    <sql id="student-and-city2">
        ${student}.student_id,
        ${student}.student_name,
        ${student}.student_age,
        ${student}.student_city,
        ${city}.id,
        ${city}.name,
        ${city}.state,
        ${city}.country,
        ${city_2}.id AS co_id ,
        ${city_2}.name AS co_name ,
        ${city_2}.state AS co_state ,
        ${city_2}.country AS co_country
    </sql>

    <resultMap id="studentWithInnerCityResult2" type="Student">
        <id property="studentId" column="student_id"/>
        <result property="studentName" column="student_name"/>
        <result property="studentAge" column="student_age"/>
        <association property="city" javaType="cn.jxzhang.mybatis.model.City">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="state" property="state"/>
            <result column="country" property="country"/>
        </association>

        <!-- 因为两个City类型相同，所以需要使用 columnPrefix 来起一个别名-->
        <association property="anotherCity" javaType="cn.jxzhang.mybatis.model.City" columnPrefix="co_">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="state" property="state"/>
            <result column="country" property="country"/>
        </association>
    </resultMap>

    <sql id="student-and-city3">
        ${student}.student_id,
        ${student}.student_name,
        ${student}.student_age,
        ${student}.student_city,
        ${city}.id,
        ${city}.name,
        ${city}.state,
        ${city}.country,
        ${city_2}.id AS co_id ,
        ${city_2}.name AS co_name ,
        ${city_2}.state AS co_state ,
        ${city_2}.country AS co_country,
        ${post}.post_id,
        ${post}.post_name
    </sql>

    <!-- 测试嵌套结果集、一对多 -->
    <resultMap id="studentWithInnerCityResult3" type="Student">
        <id property="studentId" column="student_id"/>
        <result property="studentName" column="student_name"/>
        <result property="studentAge" column="student_age"/>
        <association property="city" javaType="cn.jxzhang.mybatis.model.City">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="state" property="state"/>
            <result column="country" property="country"/>
        </association>

        <!-- 因为两个City类型相同，所以需要使用 columnPrefix 来起一个别名-->
        <association property="anotherCity" javaType="cn.jxzhang.mybatis.model.City" columnPrefix="co_">
            <id column="id" property="id"/>
            <result column="name" property="name"/>
            <result column="state" property="state"/>
            <result column="country" property="country"/>
        </association>

        <!-- 关联集合类型的postId -->
        <collection property="posts" ofType="cn.jxzhang.mybatis.model.Post">
            <id property="postId" column="post_id"/>
            <result property="postName" column="post_name"/>
        </collection>
    </resultMap>

    <select id="selectStudentWithCity3" resultMap="studentWithInnerCityResult3">
        SELECT
        <include refid="student-and-city3">
            <property name="student" value="s"/>
            <property name="city" value="c"/>
            <property name="city_2" value="c2"/>
            <property name="post" value="p"/>
        </include>
        FROM student s inner join city c on s.student_city = c.id
        INNER JOIN city c2 on c.id = c2.id
        INNER join post p on s.student_id = p.student_id
        WHERE s.student_name = #{studentName, javaType=String, jdbcType=VARCHAR}
        AND
        s.student_age = #{studentAge, javaType=Integer, jdbcType=INTEGER}
    </select>

    <!--
        测试自动映射：默认情况下自动映射处理完毕之后将会处理手动映射
        以下例子中studentId为手动映射，student类的其他属性为自动映射
     -->
    <resultMap id="studentResultMap3" type="cn.jxzhang.mybatis.model.Student">
        <id property="studentId" column="student_id"/>
    </resultMap>

    <select id="selectStudentReturnResultMap3" resultMap="studentResultMap3">
        SELECT *
        FROM student s
        WHERE s.student_name = #{studentName, javaType=String, jdbcType=VARCHAR}
              AND
              s.student_age = #{studentAge, javaType=Integer, jdbcType=INTEGER}
    </select>

    <!-- 开启二级缓存 -->

    <!--
        映射语句文件中的所有 select 语句将会被缓存。
        映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。
        缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。
        根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。
        缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。
        缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。
    -->

    <!--
        eviction：配置缓存刷新策略
            LRU – 最近最少使用的:移除最长时间不被使用的对象。
            FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
            SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。
            WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。
        flushInterval: 缓存刷新时间。默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。
        size: 缓存大小
        readonly: 只读的缓存会给所有调用者返回缓 存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存 会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是 false。
    -->
    <cache eviction="FIFO" flushInterval="60000" size="1024" readOnly="true"/>

    <!--  动态SQL -->

    <!-- 1. if -->
    <select id="findStudentWithNameLike" resultType="Student">
        SELECT * FROM student WHERE student_age = #{studentAge}
        <if test="studentName != null">
            AND student_name like #{studentName}
        </if>

        <if test="studentCity != null">
            AND student_city like #{city}
        </if>
    </select>

    <!-- 3. choose -->

    <select id="findStudentWithNameLike2" resultType="Student">
        SELECT * FROM student WHERE student_age = #{studentAge}
        <choose>
            <when test="studentName != null">
                AND student_name like #{studentName}
            </when>

            <when test="city != null">
                AND student_city like #{city}
            </when>

            <otherwise>
                AND student_city = 1
            </otherwise>
        </choose>
    </select>

    <!-- 4. where
        如果where元素第一个条件前面有where，则where会将其去掉
    -->
    <select id="findStudentWithWhere" resultType="Student">
        SELECT * FROM student
        <where>
            <if test="studentName != null">
                AND student_name = #{studentName}
            </if>

            <if test="studentAge != null">
                AND student_age = #{studentAge}
            </if>
        </where>
    </select>

    <!-- 5. set
        如果where元素第一个条件前面有where，则where会将其去掉
    -->
    <update id="updateStudentWithSet">
        UPDATE student
        <set>
            <if test="studentName != null">
                student_name = #{studentName},
            </if>

            <if test="studentAge != null">
                student_age = #{studentAge},
            </if>
        </set>
        where student_id = #{studentId}
    </update>

    <!-- 6. test foreach -->
    <select id="findStudentWithForEach" resultType="Student">
        SELECT * FROM student WHERE student_id in
        <foreach collection="studentIds" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>
    </select>

    <!-- test foreach with map
     map: index 为key item 为value
     set&list：index为迭代次数

     判断集合是否为空：list.size() > 0


     -->
    <select id="findStudentWithForEachAndMapParam" resultType="Student">
        SELECT * FROM student WHERE student_id in

        <if test="studentIds != null AND studentIds.size() > 0">
            <where>
                student_id in
                <foreach collection="studentIds" separator="," open="(" close=")" item="key" index="value">
                    #{value}
                </foreach>
            </where>
        </if>

    </select>

    <select id="findStudentWithBindProperty" resultType="int">
        <bind name="name" value="'%' + _parameter.getStudentName() + '%'"/>
        SELECT * FROM student WHERE student_name like #{name}
    </select>

    <select id="findPagedStudentList" resultType="Student">
        SELECT * FROM STUDENT
    </select>

    <select id="testFindStudentListReturnHashMap" resultType="hashMap">
        SELECT student_name, student_age FROM STUDENT WHERE student_name in
        <foreach collection="collection" open="(" close=")" separator="," item="name">
            #{name}
        </foreach>
    </select>

    <!--
        autoMapping：配置是否自动映射resultMap中不存在但是在JavaBean中存在的字段
         true（默认值）：自动映射resultMap中不存在的字段
         false：只映射手动配置的字段，其他字段不做映射

        注意：如果关闭自动映射，数据库并没有返回手动映射中存在的字段，本次查询结果将会返回null
     -->
    <resultMap id="studentAutoMapping" type="Student" autoMapping="false">
        <result property="studentName" column="student_name"/>
        <result property="studentId" column="student_id"/>
    </resultMap>

    <select id="testAutoMapping" resultMap="studentAutoMapping">
        SELECT student_id FROM STUDENT WHERE student_id = #{arg0}
    </select>

    <select id="testBindBySingleParam" resultType="int">
        <bind name="nameLike" value="name == null ? '' : '%' + name + '%'"/>
        SELECT count(*) from student
        <if test="name != null &amp;&amp; name != ''">
            <where>
                student_name like #{nameLike}
            </where>
        </if>
    </select>

    <select id="queryWithStudentAndTeacher" resultType="int">
        SELECT count(*) from student
        where student_age = #{student.studentAge} AND student_id = #{teacher.teacherId}
    </select>
</mapper>